<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
 
    <!-- refer configuration of database -->
    <context:property-placeholder location="classpath:config/db-config.properties" />
    
    <!-- 
    <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
        <jdbc:script location="classpath:config/db/dbSchema.sql"/>
        <jdbc:script location="classpath:config/db/initialDB.sql"/>
    </jdbc:initialize-database>
     -->
     
    <!-- data source -->
    <bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
        <property name="driver" value="${h2.jdbc.driver}" />
        <property name="url" value="${h2.jdbc.url}" />
        <property name="username" value="${h2.jdbc.user}" />
        <property name="password" value="${h2.jdbc.password}" />
        <property name="defaultAutoCommit" value="false" />
    </bean>
    
    <!--
    <bean id="dataSource" class="org.h2.jdbcx.JdbcDataSource">
        <property name="url" value="${h2.jdbc.url}" />
        <property name="user" value="${h2.jdbc.user}" />
        <property name="password" value="${h2.jdbc.password}" />
    </bean>
     <bean id="dataSource" class="org.hsqldb.jdbc.jdbcDataSource">
        <property name="url" value="${hsqldb.jdbc.url}" />
        <property name="username" value="${hsqldb.jdbc.user}" />
        <property name="password" value="${hsqldb.jdbc.password}" />
    </bean>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${h2.jdbc.driver}" />
        <property name="url" value="${h2.jdbc.url}" />
        <property name="username" value="${h2.jdbc.user}" />
        <property name="password" value="${h2.jdbc.password}" />
        <property name="initialSize" value="5" />
        <property name="maxActive" value="100" />
        <property name="maxIdle" value="30" />
        <property name="maxWait" value="1000" />
        <property name="poolPreparedStatements" value="true" />
        <property name="defaultAutoCommit" value="false" />
    </bean>
    -->
    
    <!-- enable autowire -->
    <context:annotation-config />
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- define the SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.motang.domain" />
        <property name="mapperLocations" value="classpath:config/mapper/*.xml" />
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.motang.dao.mapper" />
    </bean>
    
    <!-- 
    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.motang.dao.mapper.AccountMapper" />
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>
    -->

     <!-- enable component scanning -->    
    <context:component-scan base-package="com.motang.service.impl" />

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
      <tx:attributes>
        <tx:method name="add*" propagation="REQUIRED" />  
        <tx:method name="delete*" propagation="REQUIRED" />  
        <tx:method name="update*" propagation="REQUIRED" />  
        <tx:method name="list*" propagation="REQUIRED" />
        <tx:method name="get*" propagation="SUPPORTS" />
      </tx:attributes>
    </tx:advice>
    
    <aop:config>
      <aop:pointcut expression="execution(* com.motang.service.impl.*.*(..))" id="allServiceMethod"/>
      <aop:advisor advice-ref="txAdvice" pointcut-ref="allServiceMethod"/>
    </aop:config>
    <!-- 
     -->
     
   <!-- 
    <aop:config>
      <aop:pointcut expression="execution(* com.motang.dao.mapper.*.*(..))" id="allMapperMethod"/>
      <aop:pointcut expression="execution(* com.motang.dao.mapper.*.get*(java.lang.String))" id="apc1"/>
      <aop:pointcut expression="execution(* com.motang.dao.mapper.*.get*(java.lang.String)) &amp;&amp; args(username)" id="apc2"/>
      
      <aop:aspect ref="aspectLog" id="test">
        <aop:before method="logBefore" pointcut-ref="allMapperMethod"/>
        <aop:after method="logAfter" pointcut-ref="allMapperMethod"/> 
        <aop:after-returning method="logArgs(com.motang.domain.Account)" pointcut-ref="apc1" returning="arg"/>
        <aop:before method="logBeforeArgs(java.lang.String)" pointcut-ref="apc2" arg-names="username"/>
        <aop:after method="logAfterArgs(java.lang.String)" pointcut-ref="apc2" arg-names="username"/>
      </aop:aspect>
    </aop:config>
    -->
    
    <bean id="aspectLog" class="com.motang.aop.ServiceLogAdvice"/>
    
    <!-- <aop:aspectj-autoproxy /> -->
    
    <!-- 
    <bean id="mapperPct" class="org.springframework.aop.support.JdkRegexpMethodPointcut">
      <property name="pattern" value="com.motang.dao.mapper.*.get*" />
    </bean>
    <bean id="mapperPct" class="org.springframework.aop.support.DefaultPointcutAdvisor">
      <property name="pointcut" ref="mapperPct" />
      <property name="advice" ref="aspectLog"/>
    </bean>
    
    <bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interfaces" value="com.motang.dao.mapper.AccountMapper"/>
    </bean> 
    -->
 </beans>